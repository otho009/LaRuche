NOMS POSSIBLES:
===============
Projet : CCC ou C3 (Circuit-Court des Coopératives)
site web : www.c3.com
<Ruche> :
  - Cooperative
  - Souk

SYNTAXE EA:
===========
Entités : (nom[(key[, attribut calculé, ...])][, ...])
Associations :
  - binaire : Entite1 cardMin,cardMax nomAssociation cardMin,cardMax Entite2 [attributs : nom1[, ...]]
  - ternaire : Entite1 cardMin,cardMax nomAssociation cardMin,cardMax Entite2 cardMin,cardMax Entite3 [attributs : nom[, ...]] (relation ternaire)

CONVENTIONS DE NOMMAGE:
=======================
- entité en modèle EA et relations en modèle relationnel : CamelCase (Client, HistoriqueAchat, ...)
- association en modèle EA : camelCase (contient, possedeStock, ...)
- attribut en modèle EA et modèle relationnel : snake_case (prix, unite_stockage, qte_stockee, ...)

MODÈLE EA:
==========
- Entités :
  1- Client(ID(key), email, password, date_naissance, age (attribut calculé), tel_portable, date_inscription, num_rue, nom_rue, code_postal)
  2- Fournisseur(ID(key), num_siret, email, password, date_naissance, age (attribut calculé), tel_portable, date_inscription, num_rue, nom_rue, code_postal)
  3- Cooperative(ID(key), nom, description)
  4- PointCollecte(ID(key), description, num_rue, nom_rue, code_postal)
  5- Produit(ID(key), description, prix, unite_stockage)
  6- Recolte(ID(key), qte_recoltee, date_recolte, date_expiration)
  7- Stock(ID(key), qte_stockee)
  8- Panier(ID(key), description, prix)
  9- Commande(ref(key))
  10- CommandeGlobale(ref(key))
  11- Facture(ref(key))
  12- Review(ID(key), title, score, content)
  13- Wallet(ID(key), solde)
  14- MethodePaiement(ID(key), designation)

- Associations :
  1- Fournisseur 1,N possedeStock 1,1 Stock
  2- Stock 0,N contient 1,1 Produit
  3- Produit 1,N possedeRecolte 1,1 Recolte
  4- Panier 1,N regroupe 0,N Produit (attributs : qte_regroupee)
  5- Fournisseur 0,N propose 1,1 Panier (attributs : date_creation)
  6- Client 1,1 possedeWallet 1,1 Wallet
  7- Client 0,N effectue 1,1 CommandeGlobale
  8- Client 1,N choisitMP 0,1 MethodePaiement 1,N CommandeGlobale (relation ternaire)
  9- CommandeGlobale 0,1 consommeSolde 0,N Wallet (attributs : qte_consommee)
  10- CommandeGlobale 1,N seCompose 1,1 Commande (attributs : date_achat, qté_totale, prix_total)
  11- CommandeGlobale 0,1 genere 1,1 Facture
  12- Commande 1,N inclutProduit 0,N Produit (attributs : qte_commandee, prix)
  13- Commande 1,N inclutPanier 0,N Panier (attributs : qte_paniers_commandee, prix)
  14- Fournisseur 1,N valide 1,1 Commande
  15- Client 0,N ecrit 1,1 Review 0,1 Produit (attributs : date_review) (relation ternaire)
  16- Client 0,N communique 0,N Fournisseur (attributs : date_communication, contenu)
  17- Fournisseur 0,N appartient 2,N Cooperative (attributs : date_affiliation)
  18- Cooperative 1,N choisitPC 1,N PointCollecte (attributs : date_reservation)
  19- Fournisseur 1,N choisitPCI 1,N PointCollecte (attribut : date_reservation)

MODÈLE RELATIONNEL:
===================

CONTRAINTES:
============

PROCÉDURES:
===========
- Pour une coopérative sans nom, on fournit un nom par défaut = nomRegion + numéro de la coopérative dans la région

TRIGGERS:
=========
1- un trigger à la création d'un produit (table Produit) : vérifier s'il s'agit d'un type de vente unitaire ou en vrac pour remplir la table UContenuQte
2- un trigger à l'ajout d'un produit (table HistoriqueProduit) : additioner la quantité ajoutée à la quantité dans la table Produit.
3- un trigger pour les ventes : modifier l'attribut "quantité" dans la table Produit
début
  Var qteV, t; //quantité calculée avant l'appel du trigger, correspondant à la quantité commandée dans la table des ventes
  si le produit vendu possède plusieurs dates dans la table HistoriqueProduit alors
    choisir t comme le tuple ayant la date la plus ancienne;
    tant que qte_ajoutee(t) > qte_vendue(t) alors
      si qteV + qte_vendue(t) > qte_ajoutee(t) alors
        qteV <- qteV + qte_vendue(t) - qte_ajoutee(t);
        qte_vendue(t) <- qte_ajoutee(t);
        t <- (t+1); //t+1 est le tuple du même produit ayant la date de récolte la plus ancienne prochaine
      sinon
        qte_vendue <- qte_vendue + qteV;
  sinon //il n'existe qu'un seul tuple valide avec une date de récolte la plus récente
    t <- le tuple ayant cette date;
    qte_vendue(t) <- qte_vendue + qteV;
  fin si
fin

FORMULAIRES:
============
Formulaire de création d'un compte client
si client est déjà un fournisseur alors
  récupérer les informations du compte fournisseur

Formulaire d'ajout d'un produit :
si radio = vrac alors
  choisir radio kg ou l;
  spécifier quantité dans textbox de quantité;
sinon // radio = unité
  choisir radio kg ou l;
  spécifier quantité dans textbox de quantité; //nombre d'unités
  spécifier quantité dans textbox de UValeur; //quantité dans l'unité
fin si

ARBORESCENCE DU SITE :
======================
index.html (home page)
  connexion
    si client -> index.html
    si fournisseur -> profile_fournisseur.html
    mot de passe oublié ?
      demande de consultation d'email
      tapper sur lien envoyé
        saisi un nouveau mot de passage
        succès et -> même méchanisme de redirection vu précédemment selon le type d'utilisateur
  inscription
    formulaire
    si client -> index.html
    si fournisseur -> profile_fournisseur.html
  recherche produits
  header (logo)
  content (description du site)
  menu de navigation
  footer (termes et conditions, about us, FAQ, etc...)

profile_fournisseur
  ajouter produits/paniers
    ajouter un nouveau produit
    ajouter un nouvea panier
    modifier stock
  consulter stocks
    modifier stock
  historique de ventes et de stocks
    validation des commandes en attente
    consulter graphiques et statistiques
    télécharger pdf
  messages
    envoyer un message
    consulter chats
      supprimer un chat
  paramètres personnelles
    profile
      changer mot de passe
      changer photo du profile
      supprimer ton compte
  recherche

  profile_utilisateur

PERSPECTIVES:
=============
- voisinage facultatif par inclusion de zones :
s'il existe deux souks R1 et R2 telles que, Z(R1) \subseteq Z(R2) ou Z(R2) \subseteq Z(R2)
On peut trouver un meillure souk R' formée de R1 et R2 mais telle que Z(R') = Z(R1) \cap Z(R2).

- fonctionnalité de téléchargement de pdf/excel/... pour les graphiques et statistiques
