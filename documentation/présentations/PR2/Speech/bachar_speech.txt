Othmane : Introduction + Rappels + React + Perspectives
Wissem : Application web monopage + Bootstrap Font-Awesome + Difficultés + Apports
Bachar : Back-end + Bilan

Speech:
=======

Node.js
=======
Commençons par la partie back-end maintenant et notamment par Node.js
- Node.js est un environnement d'exécution JavaScript du côté serveur gratuit et open-source utilisant le moteur JavaScript V8 de Google Chrome.
- Il est doté d'une fluidité de performance provenant de sa modélisation événementielle monothread et non-bloquante
- De plus, il est facilement utilisable et extensible en raison de son architecture modulaire et de son gestionnaire de paquets NPM (Node Package Manager) qui est considéré aujourd'hui comme l'un des plus grand écosystèmes de paquets open-source

Nous avons primairement choisi Node.js pour unifier le code du côté serveur et du côté client afin de faciliter le débogage du code de l'application entière sans restriction.
D'autre part, ce choix est justifié de plus par le fait que notre application aura fort-probablement besoin de gérer et traiter un grand ensemble de données et que Node permet de le réaliser efficacement grâce à sa modélisation événementielle monothread et non-bloquante.
Enfin, une raison qui nous a encouragé davantage à adopter Node est le grand nombre de paquets utilitaires facilement téléchargeables via NPM et instantanément intégrables n'importe quelle application, en particulier la nôtre. De cette manière, nous n'aurons plus besoin à réécrire des bouts de code déjà existants.

Ainsi nous avons profité de ces caractéristiques pour la création d'une API modulaire factorisée, non redondante et lisible, incluant les différentes entités de notre application (Client, Fournisseur, Coopérative, Produit, etc..), mais aussi pour établir la connexion à notre base de données et l'hébergement du framework Express que je discuterai dans le diapo suivant

Express
=======
Express est un framework web minimaliste gratuit et open-source utilisé pour Node.js. Il est surtout connu pour ses middleware permettant de traiter les requêtes clients et pour sa gestion des routes REST et des formulaires en s'appuyant sur des concepts du modèle MVC.
D'autre part, Express est aussi bien connu pour sa capacité de générer dynamiquement du contenu par le biais de moteurs de templates tels que EJS, Pug, Handlebars, Mustache, etc.

Aujourd'hui Express est considéré comme le framework web de-facto à coupler à Node.js en raison de ses caractéristiques.
En effet, nous l'avions utilisé pour créer un serveur HTTP, ce qui a permis de réduire la verbosité introduite par le code natif de Node pour réaliser la même tâche.
D'autre part, nous l'avions utilisé pour ségmenter le traitement des requêtes via les middleware mais aussi pour la gestion des routes REST des opérations CRUD

MariaDB
=======
Nous arrivons maintenant à la partie concernant la base de données. Pour cette partie nous avons utilisé MariaDB, un SGBD relationnel gratuit et open-source assurant bien l'interopérabilité avec MySQL qui a été introduit par les créateurs de MySQL suite à l'achat de celui-ci par Oracle.
Notre raisonnement pour ce choix est basé sur trois arguments principaux :
  - le fait que MariaDB est un fork communautaire de MySQL qui est mis à jour plus souvent que ce dernier.
  - le fait que nous avions déjà créé un schéma de base de données relationnel traduit à partir du modèle EA dans la phase de conception et un système de validation des données dans le cadre d'une politique de sécurité en trois couches (client serveur base de données) pour assurer l'intégrité des données stockées.
  - le fait que le serveur de la faculté qui nous a été attribué pour le déploiment de notre site héberge bien MySQL et pourra par suite héberger le contenu de notre base de données créée sous MariaDB.

Bilan
=====
Concernant les résultats, voici le bilan suivant. Comme vous pouvez voir, nous avons bien réussi à :
- créer et tester une base de données qui est actuellement fonctionnelle
- créer les composants de base de l'interface graphique de notre site
- établir une connexion entre le client et le serveur et entre ce dernier et la base de données sur laquelle nous avons pu faire des requêtes SQL LMD

Quant à la gestion des routes, nous avons eu du mal à la réaliser et nous nous sommes toujours pas arrivé à débogé la raison sous-jacente.
Ceci a eu des conséquences néfastes sur notre application, notamment le fait que nous n'avions pas pu testé le comportement dynamique des composants.
D'autre part, bien que nous étions capable de se connecter à distance au espace dédié à notre projet, nous n'avons pas pu déployer notre site sur le serveur, faute d'absence d'une base de données dédiée à notre projet comme c'était prévu et comme c'était indiqué sur le site du SIF. N'ayant pas les droits d'accès nécessaires pour l'établissement de la base de données et sa mise en route, nous n'avons toujours pas réussi à pallier ce problème. Nous nous sommes ainsi contenté de tester notre site localement.

Basic ideas:
============
1. Node :
  - Introduction :
    a. env d'exécution JS côté serveur basé sur V8 de Google Chrome gratuit et os
    b. architecture modulaire
    c. modélisation événementielle, monothread et non-bloquante
    d. facilement utilisable et extensible à travers des modules téléchargeables via NPM
  - Raisons d'utilisation :
    a. unifier le code des côtés client et serveur => faciliter le débogage de l'application entière
    b. nous aurons besoin de gérer et traiter un grand ensemble de données et Node permet de le faire efficacement à travers sa modélisation
    c. un grand nombre de paquets utilitaires qui peuvent être intégrés à l'application pour des traitements spécifiques (au lieu de les réécrire nous-même)
  - Utilisation :
    a. création d'une API factorisée modulaire, non redondante et facilement lisible pour les entités de l'application.
    b. établir la connexion avec la base de données
    c. héberger Express
2. Express :
  - Introduction :
    a. framework web minimaliste gratuit et os utilisable avec Node.js
    b. utilisation de middleware, gestion de routes REST et formulaires en se basant sur des concepts du modèle MVC
    c. générer du contenu dynamiquement grâce à l'intégration de moteurs de templates tels que EJS, Pug, Handlebars, Mustache, etc.
  - Raisons et utilisation :
    a. le framework web de-facto à utiliser avec Node.js en raison de ses caractéristiques
    b. ségmenter le traitement des requêtes via les middleware
    c. gérer les routes REST pour les opérations CRUD
3. MariaDB :
  - Introduction :
    a. un SGBD relationnel gratuit et os
    b. introduit par les créateurs de MySQL suite à l'achat de ce dernier par Oracle
    c. assure l'interopérabilité avec MySQL
  - Raisons du choix et utilisation
    a. un fork communautaire de MySQL qui est mis à jour plus souvent que MySQL
    b. nous avons déjà créé notre modèle relationnel traduit à partir du modèle EA pendant la phase de conception
    c. le serveur de la fac héberge MySQL qui peut héberger notre BD
